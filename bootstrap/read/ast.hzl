# Any identifier
struct TSymbol {
  symbol
}

# Something that should be parsed as an operator
struct TOperator {
  char
}

struct TAccumulator {
  token_type
  list
}

define TAccumulator.each do {
  block = lambda yield
  self.list.each do i
    call block i
  end
}

define TAccumulator.length do {
  self.list.length
}

define TAccumulator.pop do {
  self.list.pop
}

# Used internally when parsing.
# Should not be in the final syntax tree.
struct TToken {
  char
}

# Generic Accumulator
define TList { l
  TAccumulator "TList" l
}

define TSymbol {
  t = new TSymbol
  # This is an ok occurance of List
  t.symbol = List
  t
}

define TEOF { l
  TAccumulator "TEOF" l
}

define TItemBreak { l
  TAccumulator "TItemBreak" l
}

define TAccumulator { token_type l
  a = new TAccumulator
  a.token_type = token_type
  a.list = l
  a
}

define TToken { c
  a = new TToken
  a.char = c
  a
}

define TOperator { c
  a = new TOperator
  a.char = c
  a
}

# All possible ast types

define TToken.token_type {
  "TToken"
}

define TSymbol.token_type {
  "TSymbol"
}

define nil.token_type {
  "TNil"
}

define TOperator.token_type {
  "TOperator"
}

define print-ast { ast
  if (kind ast == "TAccumulator") {
    print '['
    print ast.token_type
    print ']'
    puts "("
    ast.list.each do a
      print-ast a
    end
    puts ")"
    return nil
  }
  if (kind ast == "TOperator") {
    print "Op("
    print ast.char
    puts ")"
    return nil
  }
  if (kind ast == "List") {
    puts "[list]("
    ast.each do a
      print-ast a
    end
    puts ")"
    return nil
  }
  ast.symbol.print
}
