
# Hazelnut Standard Library

binding (*) int do x int y int
  "a := *x * *y"
  "&a"
end

binding (-) int do x int y int
  "a := *y - *x"
  "&a"
end

binding false bool do
  "a := false"
  "&a"
end

binding nil bool do
  ""
  "into_any(NIL, nil)"
end

binding true bool do
  "a := true"
  "&a"
end

binding gets string do
  "
  reader := bufio.NewReader(os.Stdin)
  a, _ := reader.ReadString('\n')
  "
  "&a"
end

define string.length do
  get_string_length(self)
end

binding get_string_length int do x string
  "temp := len(*x)"
  "&temp"
end

# Very inefficient
define int.times do
  yield
  if (self == 0) {
    return nil
  }
  block = lambda(yield)
  a = (self - 1)
  a.times do
    call block
  end
end
