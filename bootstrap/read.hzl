
# Read

# Any identifier
struct TSymbol {
  symbol
}

# Something that should be parsed as an operator
struct TOperator {
  char
}

# Only used on the top-level
# Technically contains a stand-alone tree
struct TEOF {
  list
}
# Only used on the top-level
# Technically contains a stand-alone tree
struct TItemBreak {
  list
}

# Used internally when parsing.
# Should not be in the final syntax tree.
struct TToken {
  char
}

define TSymbol {
  t = new TSymbol
  t.symbol = List
  t
}

define TEOF { l
  a = new TEOF
  a.list = l
  a
}

define TItemBreak { l
  a = new TItemBreak
  a.list = l
  a
}

define TToken { c
  a = new TToken
  a.char = c
  a
}

define TOperator { c
  a = new TOperator
  a.char = c
  a
}


define HZL/builtin-read do read-table stream 
  # if (table.get stream.peek) is nil
  # or  stream.peak is nil
  first_condition = (read-table.get stream.peek) == nil)
  condition = or (not first_condition) (stream.peek == nil)
  if condition {
    return TSymbol
  }
  current = stream.shift
  token = HZL/builtin-read read-table stream
  # This token is only a TSymbol
  token.symbol.unshift current
  return token
end

define HZL/read do read-table stream
  if (stream.peek == nil) {
    return (new TEOF)
  }
  reader = read-table.get stream.peek
  if (not reader) {
    reader = lambda do read-table stream
      HZL/builtin-read read-table stream
    end
  }
  call reader read-table stream
end

define HZL/read-expression do read-table stream
  a = HZL/read read-table stream

  if (kind a == "TEOF") {
    return (TEOF List)
  }
  if (kind a == "TItemBreak") {
    return (TItemBreak List)
  }


  list = HZL/read-expression read-table stream

  # if a != nil
  condition = a == nil
  if (not condition) {
    list.list.unshift a
  }
  list
end

define HZL/start do read-table stream
  expr = HZL/read-expression read-table stream
  if (kind expr == "TItemBreak") {
    items = HZL/start read-table stream
    items.unshift expr
    return items
  }
  assert (kind expr == "TEOF")
  return (List expr)
end

define HZL/read-open-paren do read-table stream
  a = HZL/read read-table stream

  if (kind a == "TEOF") {
    raise # EOF in a paren? IMPOSSIBLE
  }
  if (kind a == "TItemBreak") {
    # Ignore Item breaks in parentheses
    return (HZL/read-open-paren read-table stream)
  }
  if (kind a == "TToken") {
    condition = a.char == (char ')')
    if condition {
      return List
    }
  }

  list = HZL/read-open-paren read-table stream

  condition = a == nil
  if (not condition) {
    list.unshift a
  }
  list
end

define default-table do

  read-nothing = lambda do _ stream
    stream.shift
    nil
  end

  read-newline = lambda do _ stream
    stream.shift
    new TItemBreak
  end

  operator-function = lambda do _ stream
    a = stream.shift
    TOperator a
  end

  read-close-paren = lambda do _ stream
    stream.shift
    TToken (char ')')
  end

  read-open-paren = lambda do read-table stream
    stream.shift
    HZL/read-open-paren read-table stream
  end

  read-table = Table
  read-table.add (char ' ') read-nothing
  read-table.add (char '\n') read-newline
  read-table.add (char ':') read-newline
  read-close-paren = read-close-paren
  read-table.add (char '(') read-open-paren
  read-table.add (char ')') read-close-paren

  operators = [(char '*') (char '+')]

  operators.each do operator
    read-table.add operator operator-function
  end

  read-table
end

define print-ast { ast
  if (kind ast == "List") {
    puts "("
    ast.each do a
      print-ast a
    end
    puts ")"
    return nil
  }
  if (kind ast == "TOperator") {
    print "Op("
    print ast.char
    puts ")"
    return nil
  }
  ast.symbol.print
}
