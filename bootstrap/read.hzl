
# Read

struct TSymbol {
  symbol
}

define TSymbol {
  t = new TSymbol
  t.symbol = List
  t
}

struct TEOF {}

define TEOF {: new TEOF }

define HZL/builtin-read do read-table stream 
  first_condition = (read-table.get stream.peek) == nil)
  condition = or (not first_condition) (stream.peek == nil)
  if condition {
    return TSymbol
  }
  current = stream.pop
  token = HZL/builtin-read read-table stream
  # This token is only a TSymbol
  token.symbol.push current
  return token
end

define HZL/read do read-table stream
  if (stream.peek == nil) {
    return TEOF
  }
  reader = read-table.get stream.peek
  if (not reader) {
    reader = lambda do read-table stream
      HZL/builtin-read read-table stream
    end
  }
  call reader read-table stream
end

define HZL/start do read-table stream
  a = HZL/read read-table stream

  if (kind a == "TEOF") {
    return List
  }

  list = HZL/start read-table stream
  condition = a == nil
  if (not condition) {
    list.unshift a
  }
  list
end

read-nothing = lambda do _ stream
  stream.pop
  nil
end

read-table = Table
read-table.add (char ' ') read-nothing

forest = HZL/start read-table (List/from_a 'test this and that')
forest.each do tree
  tree.symbol.print
end
