
# Hazelnut Standard Library
# Lists

struct List {
  head
  tail
  length
}

define List { *xs
  a = new List
  xs.each { x
    a.push x
  }
  a
}

define List.print {
  starting = true
  self.each { x
    if (not starting) {
      print " -> "
    } else {
      starting = false
    }
    print x
  }
  puts
}

define List.each {
  if (not self.head) {
    return nil
  }

  block = lambda(yield)
  self.tail.each do x
    call block x
  end
}

define List.empty {
  return (self.length == 0)
}

define List.push { x
  if (not self.head) {
    self.head = sublist x
    self.tail = self.head
  } else {
    last = self.head
    self.head = sublist x

    self.head.last = last
    last.next = self.head
  }
}

define List.pop {
  if (not self.head) {
    return nil
  }
  out = self.head
  self.head = out.last
  self.head.next = nil
  return out.value
}

define List.shift { x
  if (not self.head) {
    self.push x # already handles this case
  } else {
    next_one = self.tail
    self.tail = sublist x
    self.tail.next = next_one
    next_one.last = self.tail
  }
}

define List.unshift {
  if (not self.tail) {
    return nil
  }
  out = self.tail
  self.tail = out.next
  self.tail.next = nil
  return out.value
}


struct sublist {
  next
  last
  value
}

define sublist { x
  a = new sublist
  a.value = x
  a
}

define sublist.each {
  yield self.value
  if (not self.next) {
    return nil
  }

  block = lambda(yield)
  nxt = self.next
  nxt.each do x
    call block x
  end
}

define List/from_a { xs
  a = List
  xs.each { x
    a.push x
  }
  a
}
