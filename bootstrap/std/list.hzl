
# Hazelnut Standard Library
# Lists

struct List {
  sublist
  head
  tail
}

struct sublist {
  next
  last
  value
}

define sublist { x
  a = new sublist
  a.value = x
  a
}

define List { *xs
  a = new List
  xs.each { x
    a.push x
  }
  a
}

define List.push { x
  if (not self.sublist) {
    self.sublist = new sublist
  } else {
    old_sublist = self.sublist
    new_sublist = new sublist

    new_sublist.next = old_sublist
    old_sublist.last = self.sublist
    self.sublist = new_sublist
  }
  self.sublist.value = x
}

define List.print {
  starting = true
  self.each { x
    if (not starting) {
      print " -> "
    } else {
      starting = false
    }
    print x
  }
  puts
}

define sublist.each {
  yield self.value
  if (not self.next) {
    return nil
  }

  block = lambda(yield)
  nxt = self.next
  nxt.each do x
    call block x
  end
}

define List.each {
  if (not self.sublist) {
    return nil
  }

  block = lambda(yield)
  self.sublist.each do x
    call block x
  end
}

define List.pop {
  if (not self.sublist) {
    return nil
  }
  self.sublist.pop
}


define sublist.pop {
  if self.next {
    a = self.next
    if a.next {
      return a.pop
    } else {
      val = a.value
      self.next = nil
      a.last = nil
      return val
   }
  }
  self.sublist.value = nil
  return self
}
