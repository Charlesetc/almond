
# Hazelnut Standard Library
# Strings

binding gets string do
  # This can definitely be improved upon
  "
  reader := bufio.NewReader(os.Stdin)
  a, _ := reader.ReadString('\n')
  "
  "&a"
end

define string.length do
  string/get_length self
end

binding string/get_length int do x string
  "temp := len(*x)"
  "&temp"
end

define string.each do
  string/range self (lambda yield)
end

binding string/range nil do s string action any
  "for _, x := range(*s) {
    var b rune = x
    hzl_call([]*any{action, into_any(CHAR, unsafe.Pointer(&b))}, nil)
  }"
  "nil"
end

# Arrays

define array.length do
  get_array_length self
end

binding get_array_length int do x array
  "temp := len(*x)"
  "&temp"
end

binding index any do y array x int
  ""
  "(*y)[*x]"
end

define array.index do x
  index self x
end


define array.each do
  block = lambda yield
  self.length.times_with_index do i
    call block (self.index (i - 1))
  end
end
