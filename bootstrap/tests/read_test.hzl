
# Test read

define AST/assert-equal do a b
  condition = kind a == kind b
  condition1 = and (kind a == "TAccumulator") (kind b == "List")
  condition = or condition condition1

  if (not condition) {
    puts (kind a) (kind b)
    panic "asserted equal but different kinds"
    return nil
  }
  if (kind a == "List") {
    condition = a.length == b.length
    if (not condition) {
      panic "asserted equal but lists different lengths"
      return nil
    }
    l = a.length
    l.times do
      a1 = a.pop 
      b1 = b.pop
      AST/assert-equal a1 b1
    end
    return true # Only if the other assertions pass. 
  }
  if (kind a == "TSymbol") {
    assert (List/equal a.symbol b.symbol)
    return true
  }
  if (kind a == "TOperator") {
    assert (a.char == b.char)
  }
end

define assert-reads do str *list
  list = List/from_a list
  items = HZL/start default-table (List/from_a str)

  AST/assert-equal items list
  true
end

define Symbol do str
  t = new TSymbol
  t.symbol = List/from_a str
  t
end

Describe "Read" do

  Test "two identifiers with space" do
    assert-reads "test two" (List (Symbol "test") (Symbol "two"))
  end

  Test "with parentheses" do
    inner = List (Symbol "one")
    inner = List (Symbol "test") inner (Symbol "two")
    assert-reads "test (one) two" inner
  end

  Test "double parentheses" do
    inner = List (Symbol "one")
    inner = List inner (Symbol "wow")
    inner = List (Symbol "test") inner (Symbol "two")
    assert-reads "test ((one) wow) two" inner
  end

  Test "three items" do
    one = List (Symbol "one")
    two = List (Symbol "two")
    three = List (Symbol "four") (List (Symbol "three"))
    assert-reads "one\ntwo\nfour (three)" one two three
  end

  Test "operator" do
    op = TOperator (char '+')
    assert-reads "one + two" (List (Symbol "one") op (Symbol "two"))
  end

  Test "operators with parens" do
    op1 = TOperator (char '+')
    op2 = TOperator (char '*')
    inner = List (Symbol "two") op2 (Symbol "three")
    assert-reads "one + (two * three)" (List (Symbol "one") op1 inner
  end

  Test "colon newline" do
    one = List (Symbol "one")
    two = List (Symbol "two")
    assert-reads "one: two" one two
  end

end
