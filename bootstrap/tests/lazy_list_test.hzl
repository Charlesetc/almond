
Describe "Lazy-Lists" do

  Test "initialization and shift" do
    l = List 1 2 3 4
    l = l.lazy
    a = l.shift
    assert (a == 1)
    a = l.shift
    assert (a == 2)
  end

  Test "map" do
    l = List 1 2 3 4
    l = l.lazy

    l.map { a: a + 5 }

    a = l.shift
    assert (a == 6)
    a = l.shift
    assert (a == 7)
  end

  Test "filter" do
    l = List 1 2 3 4 5
    l = l.lazy

    l.filter { a: 3 < a }

    a = l.shift
    assert (a == 4)

  end

  Test "filter and map" do
    l = List 100 2 3 40 50
    l = l.lazy


    l.filter { a: a < 10 }
    l.map { a: a * a }

    a = l.shift
    assert (a == 4)
    a = l.shift
    assert (a == 9)
    a = l.shift
    assert (a == nil)
  end

  Test "collect" do
    l = List 1 2 3 4 5 6 7 8 9
    l = l.lazy

    l.filter { a: a < 7 }
    l.map { a: a * a }
    l.filter { a: 10 < a }
    l = l.collect

    assert (l.shift == 16)
    assert (l.pop == 36)
  end

end
