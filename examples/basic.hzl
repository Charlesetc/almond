
# Hazelnut at its finest
# Yes the hazelnut language officially has commenting

define addthree do x
  + x 3
end

binding print_and_return int do x int
  "fmt.Printf(\"%d\n\", *x)"
  "x"
end

binding (*) int do x int y int
  "a := *x * *y"
  "&a"
end

binding false bool do
  "a := false"
  "&a"
end

binding true bool do
  "a := true"
  "&a"
end

a = (* 7 1000)
puts a

b = true

c = "test"
d =  c


puts c
puts d

mylist = ['two + three' '=' (addthree 2)]

puts mylist


if b {
  puts 3
} else {
  puts 4
}

puts (print_and_return 5)

puts (addthree 23) a

struct hi {
  color
  width
}

# define hi x do
#   output = (new hi)
#   .= output color x
#   .= output width 10
# end

myhi = new hi
puts myhi.color
myhi.color = "blue"
puts myhi.color
myhi.color = "yellow"
puts (.color myhi)
myhi.width = 1000000
puts myhi
puts myhi.width

define hi.test do x
  puts x
  puts "test passed"
end

define hi.wow do
  self.color = "green"
end

myhi.wow
myhi.test 2

puts "------------------------"

define called_two do x
  puts (+ 2 (yield x))
end

called_two 400 do x
  * 2 x
end

puts "------------------------"

puts (addthree 1 * 4)

define int.square do
  self * self
end

a = 12
puts a.square
