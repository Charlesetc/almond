
# Hazelnut at its finest
# Yes the hazelnut language officially has commenting

define addthree x do
  + x 3
end

binding print_and_return int do x int
  "fmt.Printf(\"%d\n\", *x)"
  "x"
end

binding * int do x int y int
  "a := *x * *y"
  "&a"
end

binding false bool do
  "a := false"
  "&a"
end

binding true bool do
  "a := true"
  "&a"
end

let a (* 7 1000)

let b true

let c "test"
let d c


puts c
puts d

let mylist (list 'one' 2 'five')

puts mylist


if b {
  puts 3
} else {
  puts 4
}

puts (print_and_return 5)

puts (addthree 23) a

struct hi {
  color
  width
}

# define hi x do
#   let output (new hi)
#   .= output color x
#   .= output width 10
# end

let myhi (new hi)
puts (. myhi "color")
.= myhi "color" 55
puts (. myhi "color")
.= myhi "color" 45
puts (. myhi "color")
.= myhi "width" true
puts myhi
puts (. myhi "width")


puts "------------------------"

define called_two x do
  puts (+ 2 (yield x))
end

called_two 400 do x
  * 2 x
end

puts "------------------------"
